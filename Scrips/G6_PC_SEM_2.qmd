---
title: "Practica 01"
format: html
editor: visual
---

## GRUPO 06

1.  Choquecahua Bendezú Carol Neyduth

2.  Clemente Valenzuela Brithney Coraima

3.  Cortez Carbonell Dariana Ysabel

4.  Felix Yataco Maria Fernanda

5.  Huaripuma Lozano Anyelina Yuli

6.  Larico Mamani Liz Heydi Patricia

# PROYECTO RSTUDIO

## **INTRODUCIÓN**

RStudio es un entorno de desarrollo integrado (IDE) diseñado específicamente para el lenguaje de programación R, que es ampliamente usado en estadística, análisis de datos y ciencia de datos. Este software proporciona una interfaz amigable y herramientas potentes que facilitan la escritura de código, la visualización de datos y la creación de informes reproducibles. RStudio integra múltiples paneles para la edición de scripts, la consola, la visualización de gráficos de usuario y la gestión de archivos, lo que optimiza el flujo de trabajo y mejora la productividad en proyectos de análisis estadístico y programación.

Por lo que conocer las funciones y paquetes de RStudio es importate ya que amplía significativamente las capacidades del lenguaje R, permitiendo realizar análisis complejos, manipulación avanzada de datos y visualizaciones personalizadas.

## [**FUNCIONES**]{.underline}

**FUNCION 1:** Introducción a la función`table()` en R

-   La función **`table()`** en R es una herramienta fundamental para crear tablas de frecuencia, tanto unidimensionales como bidimensionales, conocidas como tablas de contingencia. Estas tablas son esenciales para analizar datos categóricos, ya que permiten visualizar la distribución de frecuencias de diferentes variables.

```         
table(..., exclude, useNA)
```

El parámetro **exclude** es un vector que especifica los niveles que deben excluirse de la tabla.

Si **`exclude = NULL`**, se incluyen los valores NA, lo que equivale a **`useNA = 'always'`**.

El parámetro **useNA** controla cómo se manejan los valores NA (faltantes) en la tabla. Puede tener tres valores:

-   **"no"**: No se incluyen los valores NA en la tabla.

-   **"ifany"**: Se incluyen los valores NA si hay al menos uno en la tabla.

-   **"always"**: Siempre se incluyen los valores NA en la tabla.

#### En la tabla de frecuencia de una via:

[***Ejemplo de Uso***]{.underline}

```{r}
Estudia <- c('Siempre', 'Nunca', 'A veces', 'A veces', 'A veces',
          'Nunca', 'Siempre', NA, 'Siempre', NA, 
          'Nunca', 'Siempre', 'Nunca', 'A veces', 'A veces', 'A veces',
          'Nunca', 'Siempre', NA,'Nunca', 'Siempre', 'Nunca', 'A veces',"Puede ser", 'A veces')
```

```{r}
table(Estudia)
```

Con el fin de identificar y cuantificar los valores **NA** presentes en la tabla, es necesario recurrir al siguiente proceso:

```{r}
table(Estudia, useNA='always')

```

Para poder generar una tabla sin el termino "Puede ser", se requiere el siguiente proceso:

```{r}
table(Estudia, exclude= ("Puede ser"))

```

#### En la tabla de frecuencia de dos vias:

[***Ejemplo de Uso***]{.underline}

Supongamos que tenemos dos variables categóricas: **`género`** y **`preferencia`**. Queremos crear una tabla de contingencia para ver cómo se distribuyen estas variables.

```{r}
# Crear variables de ejemplo
genero <- c("Hombre", "Mujer", "Hombre", "Mujer", "Mujer", "Hombre", "Mujer", "Hombre", "Mujer", "Mujer", "Hombre", "Mujer", "Hombre")
preferencia <- c("Deporte", "Arte", "NA", "Si",  "Deporte", "Arte", "Si", "Música", "Música", "NA","Arte", "NA", "Si")

# Crear tabla de contingencia
tabla_contingencia <- table(genero, preferencia)

# Mostrar la tabla
print(tabla_contingencia)
```

Con el fin de obtener una tabla precisa, se eliminarán los niveles erróneos detectados en las columnas "Preferencia".

El código empleado incluirá un vector de exclusión que define los niveles a omitir.

```{r}
tabla2 <- table(genero, preferencia, exclude=c("Si", "NA"))
tabla2
```

## **FUNCION 2**

Funcion `prop.table`

-   La funcion **`prop.table()`** es usada para calcular la proporcion de valores en una tabla en comparacion con el conjunto de datos completos, en una fila o columna especifica, viene a ser una funcion que se destaca en el campo medico, y otras areas ,especificamente para estudios o analisis estadistico.Para ello se basa en la siguiente estructura

    **PARAMETROS DE LA FUNCION:**

    ```{r}
    prop.table(x,  margin=NULL)
    ```

**QUE INDICA CADA PARAMETRO:**

`x:`sirve para indicar la tabla de frecuencia

`margin:` aqui se definen numericamente -\>***1=*** proporciones por filas; ***2=***proporciones por columna

`NULL:` se usa cuando se quiere frecuencias globales

Aqui basicamente la funcion `prop.table()` no opera directamente sobre la variable si no que lo hace sobre la tabla de frecuencia absolutas creadas en `table()`

[***Ejemplo de Uso***]{.underline}

```{r}
genero <- c("hombre","mujer", "hombre","mujer", "hombre")
 edad <- c("adulto", "joven","adulto","joven","joven")
```

Ahora crearemos una tabla de 2 vias :

```{r}
tabla_dos_vias <- table(genero, edad)
prop.table(tabla_dos_vias)
```

Ahora debemos de saber que esta función se incluye un argumento; `"margin"`, el cual se establece con parametros numericos:

**1-** Calcula proporciones, en la suma de cada ***FILA***

**2-** Calcula proporciones, en la suma de cada ***COLUMNA***

```{r}
prop.table(tabla_dos_vias, margin = 1)
```

```{r}
prop.table(tabla_dos_vias, margin = 2)
```

## **FUNCION 3**

Funcion `addmargins`

-   La función **`addmargins`** en R se utiliza para agregar márgenes (como totales o promedios) a tablas o matrices multidimensionales. Su estructura básica es:

`addmargins(A, margin = seq_along(dim(A)), FUN = sum, quiet = FALSE)`

[**Parámetros principales:**]{.underline}

-   *`A:` Tabla o matriz a la que se agregarán los márgenes.*

-   *`margin`: Dimensiones sobre las cuales se calcularán los márgenes:*

    -   *1: Márgenes por filas.*

    -   *2: Márgenes por columnas.*

    -   *NULL: Márgenes globales.*

-   *`FUN`: Función para calcular el margen (por ejemplo, sum, mean, etc.).*

-   *`quiet`: Suprime el mensaje que indica el orden de cálculo de los márgenes.*

```{r}
# Crear una matriz
mymatrix <- matrix(c(4, 1, 3, 2, 1, 2, 1, 5, 2, 4, 3, 1), ncol = 3, byrow = TRUE)
```

```{r}
# Imprimir la matriz original
print(mymatrix)
```

[TOTALES DE CADA FILA]{.underline}

```{r}
# Agregar totales por filas (margin = 1)
margin_matrix_rows <- addmargins(mymatrix, margin = 1, FUN = sum)
print(margin_matrix_rows)

# Agregar totales por columnas (margin = 2)
margin_matrix_cols <- addmargins(mymatrix, margin = 2, FUN = sum)
print(margin_matrix_cols)
```

[Promedios en lugar de totales]{.underline}

```{r}
# Calcular promedios por filas y columnas
mean_matrix <- addmargins(mymatrix, margin = c(1, 2), FUN = mean)
print(mean_matrix)
```

[***Ejemplo de Uso***]{.underline}

```{r}
my_table <- matrix(c(10, 5, 8, 12), nrow = 2, byrow = TRUE, 
                   dimnames = list(c("Adolescentes", "Adulto mayor"), c("Diabetes tipo 2", "Diabetes tipo 1")))
```

**1. Totales de filas y columnas:** Esto agrega sumas de filas y sumas de columnas

```{r}
addmargins(my_table)

```

**2. Solo totales de filas:**

```{r}
addmargins(my_table, margin = 1)

```

**3. Solo totales de columnas:**

```{r}
addmargins(my_table, margin = 2)

```

Calculemos las **medias** de `filas y columna`s en lugar de sumas:

```{r}
addmargins(my_table, FUN = mean)

```

## [**PAQUETE**]{.underline}

Paquete `ggplot2`

El ggplot2 es un paquete del lenguaje de programación R que se utiliza para crear gráficos de manera eficiente y elegante. Está basado en la Gramática de los Gráficos (Grammar of Graphics), una teoría que propone construir gráficos de manera modular combinando distintos componentes. Su objetivo es crear gráficos claros, personalizables y reproducibles.

Características principales:

1.  Usa la función ggplot() como base para construir gráficos paso a paso.

2.  Permite añadir capas como puntos, líneas, barras, etc. con funciones como geom_point(), geom_line(), geom_bar(), etc.

3.  Facilita el uso de temas (theme) y escalas (scale) para personalizar los gráficos.

4.  Admite facetas (facet_wrap() o facet_grid()) para dividir datos en subgráficos automáticamente.

5.  Muy útil en visualización de datos exploratoria y presentación de resultados científicos.

    PROCEDIMIENTO:

    1.  Activar el paquete con el comando library(ggplot2).
    2.  Buscar comandos con el comando help("ggplot2-package".
    3.  Acitvar un comando.

```{r}
install.packages("ggplot2")
```

```{r}
library(ggplot2)
```

```{r}
help("ggplot2-package")
```

Ejemplo:

```{r}
# Cargar el paquete
library(ggplot2)

# Preparar las variables
mtcars$am <- factor(mtcars$am, labels = c("Automático", "Manual"))

# Crear el histograma
ggplot(data = mtcars, aes(x = mpg, fill = am)) +
  geom_histogram(binwidth = 2, color = "black", alpha = 0.7) +
  facet_wrap(~am) +
  labs(
    title = "Distribución del Consumo de Combustible (mpg)",
    subtitle = "Comparado entre transmisión automática y manual",
    x = "Millas por galón (mpg)",
    y = "Cantidad de autos",
    fill = "Transmisión"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(face = "bold", size = 16),
    legend.position = "none"
  )
```

¿Qué hace el histograma?

-   Muestra cuántos autos tienen ciertos valores de mpg.

-   Separa el gráfico por tipo de transmisión (am).

-   Usa binwidth = 2, es decir, agrupa los datos en intervalos de 2 mpg.

-   Colorea por tipo de transmisión y usa bordes negros para mejor contraste.

## Plotly

Descripción:

es un potente paquete para crear visualizaciones de datos interactivas y dinámicas en R. Permite a los usuarios crear una amplia gama de gráficos, incluidos gráficos de dispersión, gráficos de líneas, gráficos de barras y mucho más. Con plotly, los usuarios pueden añadir interactividad a sus gráficos, como efectos hover y zoom, lo que facilita la exploración y el análisis de conjuntos de datos complejos.

**Instalar plotly** *#Para instalar paquetes en R, se usa la función install.packages(). El nombre del paquete debe especificarse entre comillas:*

```{r}
install.packages("plotly")
```

Finalizada la instalación, para poder usarla es necesario **cargar el paquete**. *#Para ello, utilizamos library():*

```{r}
library(plotly)
```

Convertir grafico de ggplot a plotly

*#para ello se graba los datos de anteriores de ggplot() en el objeto pp para que nos de la grafica*

```{r}
pp<-ggplot(data = mtcars, aes(x = mpg, fill = am)) +
  geom_histogram(binwidth = 2, color = "black", alpha = 0.7) +
  facet_wrap(~am) +
  labs(
    title = "Distribución del Consumo de Combustible (mpg)",
    subtitle = "Comparado entre transmisión automática y manual",
    x = "Millas por galón (mpg)",
    y = "Cantidad de autos",
    fill = "Transmisión"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(face = "bold", size = 16),
    legend.position = "none"
  )
```

*#Ejecuta ggplotly sobre objeto pp y se dara el grafico interactivo*

```{r}
ggplotly(pp)
```

# **Shiny**

Este paquete permite crear aplicaciones web interactivas directamente desde R, sin necesidad de conocimientos avanzados en diseño web. Su principal objetivo es facilitar la construcción de interfaces dinámicas que permitan a los usuarios interactuar con datos, gráficos y algoritmos en tiempo real.

Para poder instarlo podemos hacer uso del siguiente comando:

```{r}
install.packages("shiny")
```

O tambien lo podemos instalar diendo al panel de utilidades, luego a packages, a installar y nos saldra:

![](images/clipboard-3787541672.png){fig-align="center" width="272"}

Verificamos que este en el repositorio (CRAN), escribimos el nombre del paquete y le damos click a instalar.

Finalizada la instalación, para poder usarla es necesario cargar el paquete. Es ahí donde, utilizamos *library():*

```{r}
library(shiny)
```

Para porder crear una app debemos de:

**Crear un directorio**

La más sencilla es crear un nuevo directorio para tu aplicación y colocar `app.R`en él un único archivo llamado. Este `app.R`archivo se usará para indicarle a Shiny cómo debe verse y comportarse tu aplicación.

EJEMPLO:\
***Histograma***

```{r}
# Define la interfaz de usuario para la aplicación
ui <- fluidPage(
  
  # Título de la aplicación
  titlePanel("Histograma"),
  
  # Barra lateral con entrada deslizante para el número de contenedores 
  sidebarLayout(
    sidebarPanel(
      sliderInput("contenedores",
                  "Número de contenedores:",
                  min = 5,
                  max = 50,
                  value = 20)
    ),
    
    # Mostrar una gráfica de la distribución generada
    mainPanel(
      plotOutput("distPlot")
    )
  )
)

# Define la lógica del servidor necesaria para dibujar un histograma
server <- function(input, output) {
  
  output$distPlot <- renderPlot({
    # generar contenedores basados en input$contenedores
    x    <- faithful[, 2]
    bins <- seq(min(x), max(x), length.out = input$contenedores + 1)
    
    # Dibuje el histograma con el número especificado de contenedores.
    hist(x, breaks = bins, col = 'skyblue', border = 'white',
         xlab = 'Edad(años)',
         main = 'Histograma de años de Dx')
  })
}

# Ejecutar la aplicación 
shinyApp(ui = ui, server = server)
```

![](images/clipboard-3216123236.png){fig-align="center" width="490"}

***Grafico de barras***

```{r}
library(shiny)
library(ggplot2)

datos <- data.frame(
  categoria = c("A", "B", "C", "D"),
  Edad = c(39, 40 , 55, 62),
  Diagnostico = c(10, 15, 20, 12)
)

ui <- fluidPage(
  titlePanel("Gráfico de barras dinámico"),
  sidebarLayout(
    sidebarPanel(
      radioButtons("var", "Variable a graficar:",
                   choices = c("Edad", "Diagnostico"), selected = "Edad")
    ),
    mainPanel(
      plotOutput("barPlot")
    )
  )
)

server <- function(input, output) {
  output$barPlot <- renderPlot({
    ggplot(datos, aes_string(x = "categoria", y = input$var)) +
      geom_bar(stat = "identity", fill = "coral") +
      labs(y = input$var, x = "Enfermedad") +
      theme_minimal()
  })
}

shinyApp(ui, server)


shinyApp(ui = ui, server = server)
```

![](images/clipboard-2702021366.png){fig-align="center" width="435"}

**Funcionamiento**

Algunas formas de ejecutar la aplicación es:

-   Haga clic en el botón **Ejecutar aplicación** en la barra de herramientas del documento.

    ![](images/clipboard-1420533004.png){height="36"}

-   Utilice un atajo de teclado: `Cmd/Ctrl`+ `Shift`+ `Enter`
